---
- name: Create directories
  file:
    path: '{{ item }}'
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - '{{ cni_bin_dir }}'
    - /etc/containerd
    - /etc/kubernetes/manifests

- include_tasks: deb.yml
  when: ansible_facts.os_family == "Debian" and not kubelet_already_running

- include_tasks: rpm.yml
  when: ansible_facts.os_family == "RedHat" and not kubelet_already_running

- name: Ensure BPF is mounted
  mount:
    fstype: bpf
    path: /sys/fs/bpf
    src: bpffs
    state: mounted
  when: kube_network_plugin == 'cilium'

- name: Install Kubernetes binaries
  get_url:
    url: '{{ item.url }}'
    dest: '{{ item.dir | default(bin_dir) }}/{{ item.url | basename }}'
    owner: root
    group: root
    mode: 0755
    checksum: '{{ item.checksum }}'
  register: result
  until: result is succeeded
  retries: 3
  delay: 5
  with_items: '{{ kube_download_list_cached }}'
  when:
    - '"tar" not in item.url'
    - '"tgz" not in item.url'
    - '".gz" not in item.url'
    - '".xz" not in item.url'
    - item.groups | intersect(group_names)

- name: Unarchive kubernetes and install binaries
  unarchive:
    src: '{{ item.url }}'
    dest: '{{ item.dir | default(bin_dir) }}'
    remote_src: yes
    owner: root
    group: root
    mode: 0755
  with_items: '{{ kube_download_list_cached }}'
  when:
    - '"tar" in item.url or "tgz" in item.url or ".gz" in item.url or ".xz" in item.url'
    - item.groups | intersect(group_names)

- name: Load kernel module
  modprobe:
    name: '{{ item }}'
    state: present
  with_items: '{{ kernel_modules }}'

- name: Write modules config
  template:
    src: modules.conf.j2
    dest: /etc/modules-load.d/kubernetes.conf
    owner: root
    group: root
    mode: 0644

- name: Change sysctl params
  sysctl:
    name: '{{ item.key }}'
    value: '{{ item.value }}'
    sysctl_set: yes
    state: present
    reload: yes 
  with_dict: '{{ sysctl_params }}'

- name: Disable swap in fstab
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?[\s\t]swap\s+.*)$'
    replace: '# \1'
  register: swap_off

- name: Run swapoff
  raw: swapoff -a
  when: swap_off is changed

- name: Render kubelet systemd unit
  template:
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service
    owner: root
    group: root
    mode: 0640
  notify: Restart kubelet

- name: Render /etc/crictl.yaml
  template:
    src: crictl.yaml.j2
    dest: /etc/crictl.yaml
    owner: root
    group: root
    mode: 0644

- name: Render containerd config
  template:
    src: containerd.toml.j2
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: 0644
  notify: Restart containerd

- name: Render containerd systemd unit
  template:
    src: containerd.service.j2
    dest: /etc/systemd/system/containerd.service
    owner: root
    group: root
    mode: 0640
  notify: Restart containerd

- name: Render /etc/{{ default_configs_dir_name }}/kubelet file
  template:
    src: kubelet.j2
    dest: /etc/{{ default_configs_dir_name }}/kubelet
    owner: root
    group: root
    mode: 0644

- name: Check containerd systemd state
  systemd:
    name: containerd
    enabled: yes
    daemon_reload: yes
    state: started

- name: Render /etc/haproxy/haproxy.cfg
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    owner: root
    group: root
    mode: 0640
  when: inventory_hostname in groups["k8s-worker"]
  notify: Reload haproxy
  tags:
    - join_master
    - join_worker
    - update_configs
