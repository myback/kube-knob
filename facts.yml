---
# tasks file for facts
- name: Gathering and set facts
  hosts: k8s
  tasks:
    - name: Gather facts with --limit
      block:
        - name: Populate service facts
          service_facts:

        - name: Check if kubelet has already configured
          stat:
            path: "/var/lib/kubelet/config.yaml"
          register: kubelet_is_configured_list
          delegate_to: '{{ item }}'
          delegate_facts: True
          with_items: '{{ groups["k8s"] }}'

        - name: Reformating kubelet list on each node
          set_fact:
            kubelet_is_configured:
              stat: '{{ item.stat }}'
          delegate_to: '{{ item.item }}'
          delegate_facts: True
          with_items: '{{ kubelet_is_configured_list.results }}'
          no_log: true

        - name: Set facts
          set_fact:
            kubelet_already_running: '{{ hostvars[item].services.get("kubelet.service") and hostvars[item].services.get("kubelet.service").state == "running" and hostvars[item].kubelet_is_configured.stat.exists }}'
            host_ip: '{{ hostvars[item].ip | default(hostvars[item].ansible_host) }}'
            default_configs_dir_name: >-
              {%- if hostvars[item].ansible_facts.os_family == "Debian" -%}
              default
              {%- else -%}
              sysconfig
              {%- endif -%}
          delegate_to: '{{ item }}'
          delegate_facts: True
          with_items: '{{ groups["k8s"] }}'

        - name: Set all initialzed master
          set_fact:
            kube_cluster_initialzed_master: >-
              {%- set list = [] -%}
              {%- for node in groups["k8s-master"] if hostvars[node].kubelet_already_running -%}
              {%- set _ = list.append(node) -%}         
              {%- endfor -%}
              {{ list }}
          delegate_to: '{{ item }}'
          delegate_facts: True
          with_items: '{{ groups["k8s"] }}'

        - name: Is cluster initialzed
          set_fact:
            kube_cluster_is_initialzed: '{{ kube_cluster_initialzed_master | length > 0 }}'
          delegate_to: '{{ item }}'
          delegate_facts: True
          with_items: '{{ groups["k8s"] }}'

      when: ansible_limit is defined

    - name: Gather facts
      block:
        - name: Populate service facts
          service_facts:

        - name: Check if kubelet has already configured
          stat:
            path: "/var/lib/kubelet/config.yaml"
          register: kubelet_is_configured

        - name: Set facts
          set_fact:
            kubelet_already_running: '{{ services.get("kubelet.service") and services.get("kubelet.service").state == "running" and kubelet_is_configured.stat.exists }}'
            host_ip: '{{ ip | default(ansible_host) }}'
            default_configs_dir_name: >-
              {%- if ansible_facts.os_family == "Debian" -%}
              default
              {%- else -%}
              sysconfig
              {%- endif -%}

        - name: Get all initialzed master
          set_fact:
            kube_cluster_initialzed_master: >-
              {%- set list = [] -%}
              {%- for node in groups["k8s-master"] if hostvars[node].kubelet_already_running -%}
              {%- set _ = list.append(node) -%}         
              {%- endfor -%}
              {{ list }}

        - name: Is cluster initialzed
          set_fact:
            kube_cluster_is_initialzed: '{{ kube_cluster_initialzed_master | length > 0 }}'

      when: ansible_limit is not defined
